#include "g4m.h"

// Autogenerated + struct utils
#include "autogenerated_metadata.h"
#include "structToMapWriter.h"

template <class realT>
int computeModel();

int main(int argc, char * argv[])
{
	Timer stopwatch;
	stopwatch.start();

	computeModel<float>();

	stopwatch.stop();
	printf("Working time: %f\n", stopwatch.elapsedSeconds());

	return 0;
}

template <class realT>
int computeModel()
{
	// Initialize outputs
	simUnitsData simuData("data\\simu.bin");
	// Helper sets
	vector<int> years;
	years.push_back(2000);
	years.push_back(2005);
	years.push_back(2010);
	vector<string> results;
	results.push_back("forestArea");
	results.push_back("forestShare");
	// Initialize dimensions of SIMU data class
	simuData.addDim("year", years);
	simuData.addDim("value", results);
	// SIMU data writer
	structToMapWriterT< outCellDataT<realT> > simuDataWriter(simuData);
	simuDataWriter.addOutputParam("forestArea", DISTRIBUTE_PROPORTIONALLY);
	simuDataWriter.addOutputParam("forestShare", IS_CONSTANT);
	// Summary by countries
	tableData countrySummaryTable;
	vector<int> countries;
	countries.push_back(1);
	countries.push_back(2);
	countrySummaryTable.addDim("year", years);
	countrySummaryTable.addDim("country", countries);
	countrySummaryTable.addDim("value", results);
	structToTableWriterT< outCellDataT<realT> > countrySummaryWriter(countrySummaryTable);
	countrySummaryWriter.addOutputParam("forestArea");
	countrySummaryWriter.addOutputParam("forestShare");
	//countrySummaryBaseT< outCellDataT<realT> > outCountrySummaryData;
	countrySummaryT< outCellDataT<realT> > outCountrySummaryData;

	// Initialize data
	dynamicArray(inCellDataT<realT>, inCellData);
	dynamicArray(outCellDataT<realT>, outCellData);
	inCommonDataT<realT> inCommonData;

	// Holder of data classes and structs
	dataContainersHolder<realT> pHolder(simuDataWriter, outCountrySummaryData);

	std::string guiFile = "data/gui_file.txt";

	inputFileInfoT info(guiFile);

	readInputs<realT>(info, simuData, inCellData, inCommonData, outCellData, outCountrySummaryData);
	// TODO: move to readInputs
	outCountrySummaryData.allocate(countries, inCommonData.beginYear, inCommonData.endYear);

	for (inCommonData.year = inCommonData.beginYear; inCommonData.year <= inCommonData.endYear; inCommonData.year++)
	{
		simuData.pointPush(inCommonData.year);
		countrySummaryTable.pointPush(inCommonData.year);
		parallelExecute< inCellDataT<realT>, inCommonDataT<realT>, outCellDataT<realT> > (
			&computeCell<realT>, inCellData, inCommonData, outCellData, inCommonData.numCells, (void *)(& pHolder));
		for (int countryIdx = 0; countryIdx < inCommonData.numCountries; countryIdx++)
		{
			countrySummaryTable.pointPush(countryIdx);
			//countrySummaryWriter.writeData(outCountrySummaryData[countryIdx]);
			countrySummaryTable.pointPop();
		}

		simuData.pointPop();
		countrySummaryTable.pointPop();
	}

	dynamicFree(inCellData);
	dynamicFree(outCellData);

	simuData.SaveToFile("..\\GLOBIOM GUI\\data\\maps", "my_test_map");
	countrySummaryTable.SaveToFile("..\\GLOBIOM GUI\\data\\tables", "my_test_table");

	return 0;
};