#include "g4m.h"

// Autogenerated + struct utils
#include "autogenerated_metadata.h"
#include "autogenerated_operators.h"
//#include "structToMapWriter.h"

template <class realT>
int computeModel();

int main(int argc, char * argv[])
{
	Timer stopwatch;
	stopwatch.start();

	computeModel<float>();

	stopwatch.stop();
	printf("Working time: %f\n", stopwatch.elapsedSeconds());

	return 0;
}

template <class realT>
int computeModel()
{
	// Struct with paths to input files and configs
	std::string guiFile = "data/gui_file.txt";
	inputFileInfoT info(guiFile);

	// Declaring outputs and writers of outputs
	simUnitsData simuData(info.files.simuBinFileName);
	tableData countrySummaryTable;
	vector<int> countries;
	structToMapWriterT< outCellDataT<realT> > simuDataWriter(simuData);
	//structToMapWriterT< outCellDataT<realT> > * simuDataWriter = NULL;
	structToTableWriterT< outCellDataT<realT> > countrySummaryWriter(countrySummaryTable);
	// data by countries (like countryData)
	countrySummaryT< outCellDataT<realT> > outCountrySummaryData;
	// data for entire Earth grid (like griddata)
	structGrid< outCellDataT<realT> > structGridOut;

	// Holder of data classes and structs
	dataContainersHolder<realT> pHolder(simuData, 
		countrySummaryTable, 
		simuDataWriter, 
		countrySummaryWriter, 
		outCountrySummaryData,
		structGridOut);
	
	// Initialize data
	dynamicArray(inCellDataT<realT>, inCellData);
	dynamicArray(outCellDataT<realT>, outCellData);
	inCommonDataT<realT> inCommonData;

	readInputs<realT>(info, pHolder, countries, inCellData, inCommonData, outCellData);

	// main by-years loop
	for (inCommonData.year = inCommonData.beginYear; inCommonData.year <= inCommonData.endYear; inCommonData.year++)
	{
		simuData.pointPush(inCommonData.year);
		countrySummaryTable.pointPush(inCommonData.year);
		parallelExecute< inCellDataT<realT>, inCommonDataT<realT>, outCellDataT<realT> > (
			&computeCell<realT>, inCellData, inCommonData, outCellData, inCommonData.numCells, (void *)(& pHolder));

		countrySummaryWriter.writeData(outCountrySummaryData, countries);

		simuData.pointPop();
		countrySummaryTable.pointPop();
	}

	dynamicFree(inCellData);
	dynamicFree(outCellData);

	simuData.SaveToFile(info.folders.outputDir, info.files.outMapFileName);
	countrySummaryTable.SaveToFile(info.folders.outputDir, info.files.outTableFileName);

	return 0;
};